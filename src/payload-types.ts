/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    projects: Project;
    'quick-projects': QuickProject;
    services: Service;
    'home-faqs': HomeFaq;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    'quick-projects': QuickProjectsSelect<false> | QuickProjectsSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    'home-faqs': HomeFaqsSelect<false> | HomeFaqsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  /**
   * Main title for the project (used in homepage and case study)
   */
  title: string;
  /**
   * URL-friendly version of title (auto-generated)
   */
  slug: string;
  status: 'draft' | 'published' | 'archived';
  /**
   * Show in homepage featured section
   */
  featured?: boolean | null;
  /**
   * Short description shown in homepage ProjectsIsland
   */
  briefDescription: string;
  /**
   * Main image (shown on hover in homepage + used in Article Section)
   */
  mainImage: number | Media;
  /**
   * Main category tag (e.g., "Web Development", "UI Design")
   */
  mainTag: string;
  /**
   * Publication date (auto-set to today)
   */
  uploadDate: string;
  /**
   * Author profile image
   */
  authorImage: number | Media;
  /**
   * Post by: Author name
   */
  authorName: string;
  /**
   * Add multiple content sections with headings and paragraphs
   */
  articleSections?:
    | {
        heading: string;
        paragraphs: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  quote: {
    text: string;
    author: string;
  };
  /**
   * Add unlimited images for the horizontal scrolling gallery
   */
  galleryImages?:
    | {
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  techStack?:
    | {
        /**
         * Technology name (e.g., "React", "TypeScript")
         */
        heading: string;
        /**
         * Brief description of how this tech was used
         */
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Step numbers (Step 1, Step 2...) are auto-generated
   */
  workflowSteps?:
    | {
        /**
         * Step title
         */
        title: string;
        /**
         * Step description
         */
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Maximum 4 achievement accordions
   */
  achievements?:
    | {
        /**
         * Achievement title
         */
        title: string;
        /**
         * Achievement description
         */
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Final section title
   */
  finalTitle: string;
  /**
   * Add as many tags as needed (also used in homepage)
   */
  finalTags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Add project-specific frequently asked questions
   */
  templateFAQs?:
    | {
        question: string;
        answer: string;
        id?: string | null;
      }[]
    | null;
  seo?: {
    /**
     * SEO title (50-60 characters recommended, leave empty to use project title)
     */
    metaTitle?: string | null;
    /**
     * SEO description (150-160 characters recommended)
     */
    metaDescription?: string | null;
    /**
     * Open Graph image for social sharing (1200x630px recommended)
     */
    ogImage?: (number | null) | Media;
    keywords?:
      | {
          keyword: string;
          id?: string | null;
        }[]
      | null;
  };
  metrics?:
    | {
        label: string;
        value: string;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Small projects displayed in homepage marquee
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quick-projects".
 */
export interface QuickProject {
  id: number;
  /**
   * Project title (e.g., "Ancient Tech Redesign")
   */
  title: string;
  /**
   * Short description (~120 characters)
   */
  briefDescription: string;
  /**
   * Main tag (e.g., "UI Redesign", "Vibe Code", "E-commerce")
   */
  projectType: string;
  /**
   * Background image for the card
   */
  cardImage: number | Media;
  /**
   * Maximum 3 tags
   */
  tags: {
    tag: string;
    id?: string | null;
  }[];
  /**
   * Link for "Visit" button (Figma, GitHub, live site, etc.)
   */
  visitUrl: string;
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
/**
 * Services displayed in homepage Services Island
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: number;
  /**
   * First line of title (e.g., "UX/UI Design")
   */
  title1: string;
  /**
   * Second line of title (e.g., "& Engineering")
   */
  title2: string;
  /**
   * Service description
   */
  description: string;
  /**
   * Service-related tags (unlimited)
   */
  serviceTags: {
    tag: string;
    id?: string | null;
  }[];
  /**
   * Technologies & Tools used (unlimited)
   */
  techTags: {
    tech: string;
    id?: string | null;
  }[];
  /**
   * Optional: Example project description
   */
  exampleProject?: string | null;
  /**
   * Optional: Maximum 4 images for BounceCards
   */
  images?:
    | {
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
/**
 * Global FAQs displayed in homepage FAQs Island
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-faqs".
 */
export interface HomeFaq {
  id: number;
  /**
   * FAQ question
   */
  question: string;
  /**
   * FAQ answer
   */
  answer: string;
  /**
   * Display order (lower numbers appear first)
   */
  order: number;
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'quick-projects';
        value: number | QuickProject;
      } | null)
    | ({
        relationTo: 'services';
        value: number | Service;
      } | null)
    | ({
        relationTo: 'home-faqs';
        value: number | HomeFaq;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  status?: T;
  featured?: T;
  briefDescription?: T;
  mainImage?: T;
  mainTag?: T;
  uploadDate?: T;
  authorImage?: T;
  authorName?: T;
  articleSections?:
    | T
    | {
        heading?: T;
        paragraphs?: T;
        id?: T;
      };
  quote?:
    | T
    | {
        text?: T;
        author?: T;
      };
  galleryImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  techStack?:
    | T
    | {
        heading?: T;
        description?: T;
        id?: T;
      };
  workflowSteps?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  achievements?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  finalTitle?: T;
  finalTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  templateFAQs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  metrics?:
    | T
    | {
        label?: T;
        value?: T;
        description?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quick-projects_select".
 */
export interface QuickProjectsSelect<T extends boolean = true> {
  title?: T;
  briefDescription?: T;
  projectType?: T;
  cardImage?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  visitUrl?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title1?: T;
  title2?: T;
  description?: T;
  serviceTags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  techTags?:
    | T
    | {
        tech?: T;
        id?: T;
      };
  exampleProject?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-faqs_select".
 */
export interface HomeFaqsSelect<T extends boolean = true> {
  question?: T;
  answer?: T;
  order?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}